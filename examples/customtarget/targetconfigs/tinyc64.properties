# configuration file for a C64 like Prog8 compilation target

cpu = 6502
encoding = petscii
load_address = $0801
memtop = $cfe0
bss_highram_start = $c000
bss_highram_end = $cfdf
bss_goldenram_start = 0
bss_goldenram_end = 0

# io_regions specifies memory-mapped I/O registers that should be treated differentely.
# it can be zero or more memory address ranges (inclusive) separated by comma
io_regions = 0,1,$d000-$dfff

# zeropage scratch variables. zp_scratch_reg must always be zp_scratch_b1+1 !
zp_scratch_b1 = $02
zp_scratch_reg = $03
zp_scratch_w1 = $fb
zp_scratch_w2 = $fd

# free zeropage locations for the various zp usage methods
# zero or more zeropage address ranges (inclusive).
zp_fullsafe = $02-$90,$92-$9f,$a3-$bf,$c1,$c2,$c3,$c4,$c6-$ca,$cf-$f4,$f7-$ff
zp_kernalsafe = $02-$25,$39-$48,$4b-$4f,$51,$52,$53,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f,$60-$8f,$ff
zp_basicsafe = $02-$06,$0a,$0e,$92,$96,$9b,$9c,$9e,$9f,$a6,$b0,$b1,$be,$bf,$f9

# the start of the 32 bytes used by the R0-R15 virtual registers. Can be in Zeropage or elsewhere.
virtual_registers = $cfe0

# Where can we find the standard library (syslib.p8). You can still add more paths manually using -srcdirs
library = ./libraries/tinyc64

# if a non-empty custom launcher code string is supplied, the compiler won't output ANY launcher / init code by itself,
# and instead outputs whatever is specified here. (You can use \n here for newline and \ for line continuantions)
custom_launcher_code =

# additional options passed to the assembler program
assembler_options =
